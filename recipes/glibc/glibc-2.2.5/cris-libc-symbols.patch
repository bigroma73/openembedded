
#
# Patch managed by http://www.mn-logistik.de/unsupported/pxa250/patcher
#

--- glibc-2.2.5/include/libc-symbols.h~cris-libc-symbols.patch	2004-09-03 19:00:33.000000000 -0500
+++ glibc-2.2.5/include/libc-symbols.h	2004-09-03 19:00:37.000000000 -0500
@@ -207,18 +207,29 @@
 #   define __make_section_unallocated(section_string)
 #  endif
 
-/* Tacking on "\n\t#" to the section name makes gcc put it's bogus
-   section attributes on what looks like a comment to the assembler.  */
+/* Tacking on "\n\t#" to the section name makes gcc put its bogus
+   section attributes on what looks like a comment to the assembler.
+   Furthermore, with gas, we need to add a "#APP" line so the comment
+   is recognized as such.  */
+#  ifdef HAVE_GNU_AS
+#   define __as_app_line "#APP\n"
+#  else
+#   define __as_app_line ""
+#  endif
 #  ifdef HAVE_SECTION_QUOTES
 #   define link_warning(symbol, msg) \
   __make_section_unallocated (".gnu.warning." #symbol) \
-  static const char __evoke_link_warning_##symbol[]	\
-    __attribute__ ((section (".gnu.warning." #symbol "\"\n\t#\""))) = msg;
+  static const char __evoke_link_warning_##symbol[]			 \
+    __attribute__							 \
+      ((section (".gnu.warning." #symbol "\"\n" __as_app_line "\t#\""))) \
+    = msg;
 #  else
 #   define link_warning(symbol, msg) \
   __make_section_unallocated (".gnu.warning." #symbol) \
-  static const char __evoke_link_warning_##symbol[]	\
-    __attribute__ ((section (".gnu.warning." #symbol "\n\t#"))) = msg;
+  static const char __evoke_link_warning_##symbol[]			\
+    __attribute__							\
+      ((section (".gnu.warning." #symbol "\n" __as_app_line "\t#")))	\
+    = msg;
 #  endif
 # else /* Not ELF: a.out */
 #  ifdef HAVE_XCOFF
