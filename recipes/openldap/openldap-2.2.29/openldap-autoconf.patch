# This patch makes the configure stuff work with autoconf 2.59
#
--- openldap-2.2.24/.pc/openldap-autoconf.patch/build/openldap.m4	2005-03-12 19:03:12.000000000 -0800
+++ openldap-2.2.24/build/openldap.m4	2005-04-16 12:47:49.897651408 -0700
@@ -65,7 +65,7 @@
 dnl
 dnl ====================================================================
 dnl
-AC_DEFUN(AC_COMPILE_CHECK_SIZEOF,
+AC_DEFUN([AC_COMPILE_CHECK_SIZEOF],
 [changequote(<<, >>)dnl 
 dnl The name to #define. 
 define(<<AC_TYPE_NAME>>, translit(sizeof_$1, [a-z *], [A-Z_P]))dnl 
@@ -173,7 +173,7 @@
 dnl
 dnl --------------------------------------------------------------------
 dnl OpenLDAP version of STDC header check w/ EBCDIC support
-AC_DEFUN(OL_HEADER_STDC,
+AC_DEFUN([OL_HEADER_STDC],
 [AC_REQUIRE_CPP()dnl
 AC_REQUIRE([OL_CPP_EBCDIC])dnl
 AC_CACHE_CHECK([for ANSI C header files], ol_cv_header_stdc,
@@ -1016,7 +1016,7 @@
 dnl Early MIPS compilers (used in Ultrix 4.2) don't like
 dnl "int x; int *volatile a = &x; *a = 0;"
 dnl 	-- borrowed from PDKSH
-AC_DEFUN(OL_C_VOLATILE,
+AC_DEFUN([OL_C_VOLATILE],
  [AC_CACHE_CHECK(if compiler understands volatile, ol_cv_c_volatile,
     [AC_TRY_COMPILE([int x, y, z;],
       [volatile int a; int * volatile b = x ? &y : &z;
@@ -1052,7 +1052,7 @@
 dnl
 dnl ====================================================================
 dnl Define sig_atomic_t if not defined in signal.h
-AC_DEFUN(OL_TYPE_SIG_ATOMIC_T,
+AC_DEFUN([OL_TYPE_SIG_ATOMIC_T],
  [AC_CACHE_CHECK(for sig_atomic_t, ol_cv_type_sig_atomic_t,
     [AC_TRY_COMPILE([#include <signal.h>], [sig_atomic_t atomic;],
 		ol_cv_type_sig_atomic_t=yes, ol_cv_type_sig_atomic_t=no)])
@@ -1064,7 +1064,7 @@
 dnl
 dnl ====================================================================
 dnl Define socklen_t if not defined in sys/types.h or sys/socket.h
-AC_DEFUN(OL_TYPE_SOCKLEN_T,
+AC_DEFUN([OL_TYPE_SOCKLEN_T],
  [AC_CACHE_CHECK(for socklen_t, ol_cv_type_socklen_t,
     [AC_TRY_COMPILE([
 #ifdef HAVE_SYS_TYPES_H
@@ -1083,7 +1083,7 @@
 dnl
 dnl ====================================================================
 dnl Define inet_aton is available
-AC_DEFUN(OL_FUNC_INET_ATON,
+AC_DEFUN([OL_FUNC_INET_ATON],
  [AC_CACHE_CHECK([for inet_aton()], ol_cv_func_inet_aton,
     [AC_TRY_LINK([
 #ifdef HAVE_SYS_TYPES_H
@@ -1110,7 +1110,7 @@
 dnl
 dnl ====================================================================
 dnl check no of arguments for ctime_r
-AC_DEFUN(OL_FUNC_CTIME_R_NARGS,
+AC_DEFUN([OL_FUNC_CTIME_R_NARGS],
  [AC_CACHE_CHECK(number of arguments of ctime_r, ol_cv_func_ctime_r_nargs,
    [AC_TRY_COMPILE([#include <time.h>],
 		[time_t ti; char *buffer; ctime_r(&ti,buffer,32);],
@@ -1145,7 +1145,7 @@
 dnl
 dnl --------------------------------------------------------------------
 dnl check return type of ctime_r()
-AC_DEFUN(OL_FUNC_CTIME_R_TYPE,
+AC_DEFUN([OL_FUNC_CTIME_R_TYPE],
  [AC_CACHE_CHECK(return type of ctime_r, ol_cv_func_ctime_r_type,
    [AC_TRY_COMPILE([#include <time.h>],
 		[extern int (ctime_r)();],
@@ -1157,7 +1157,7 @@
 ])dnl
 dnl ====================================================================
 dnl check no of arguments for gethostbyname_r
-AC_DEFUN(OL_FUNC_GETHOSTBYNAME_R_NARGS,
+AC_DEFUN([OL_FUNC_GETHOSTBYNAME_R_NARGS],
  [AC_CACHE_CHECK(number of arguments of gethostbyname_r,
 	ol_cv_func_gethostbyname_r_nargs,
 	[AC_TRY_COMPILE([#include <sys/types.h>
@@ -1207,7 +1207,7 @@
 ])dnl
 dnl
 dnl check no of arguments for gethostbyaddr_r
-AC_DEFUN(OL_FUNC_GETHOSTBYADDR_R_NARGS,
+AC_DEFUN([OL_FUNC_GETHOSTBYADDR_R_NARGS],
  [AC_CACHE_CHECK(number of arguments of gethostbyaddr_r,
 	[ol_cv_func_gethostbyaddr_r_nargs],
 	[AC_TRY_COMPILE([#include <sys/types.h>
@@ -1283,7 +1283,7 @@
 ])
 dnl ====================================================================
 dnl check for msg_accrights in msghdr
-AC_DEFUN(OL_MSGHDR_MSG_ACCRIGHTS,
+AC_DEFUN([OL_MSGHDR_MSG_ACCRIGHTS],
  [AC_CACHE_CHECK(for msg_accrights in msghdr, ol_cv_msghdr_msg_accrights,
    [AC_TRY_COMPILE([#include <sys/socket.h>],
 		[struct msghdr m; m.msg_accrightslen=0],
--- openldap-2.2.24/.pc/openldap-autoconf.patch/configure.in	2005-03-14 09:06:26.000000000 -0800
+++ openldap-2.2.24/configure.in	2005-04-16 12:52:48.802211008 -0700
@@ -590,8 +591,8 @@
 
 dnl ----------------------------------------------------------------
 dnl Checks for system services
-AC_CYGWIN
-AC_MINGW32
+dnl obsolete: sets CYGWIN (and this is not used in openldap!) AC_CYGWIN
+dnl obsolete: sets MINGW32 (and this is not used in openldap!) AC_MINGW32
 AC_EXEEXT
 AC_OBJEXT
 
@@ -1771,7 +1772,7 @@
 fi
 
 if test $ol_link_threads != no ; then
-	AC_DEFINE(LDAP_API_FEATURE_X_OPENLDAP_THREAD_SAFE,1)
+	AC_DEFINE(LDAP_API_FEATURE_X_OPENLDAP_THREAD_SAFE,1,[is -lldap_r available or not])
 fi
 
 dnl ----------------------------------------------------------------
@@ -2133,7 +2134,7 @@
 			[have_setproctitle=yes
 			LUTIL_LIBS="$LUTIL_LIBS -lutil"],
 			[have_setproctitle=no
-			LIBOBJS="$LIBOBJS setproctitle.o"
+			AC_LIBOBJ([setproctitle])
 			LIBSRCS="$LIBSRCS setproctitle.c"])])
 
 	if test $have_setproctitle = yes ; then
@@ -2174,7 +2175,7 @@
 AC_TYPE_MODE_T
 AC_TYPE_OFF_T
 AC_TYPE_PID_T
-AM_TYPE_PTRDIFF_T
+#obsolete: AM_TYPE_PTRDIFF_T
 AC_TYPE_SIGNAL
 AC_TYPE_SIZE_T
 
@@ -2212,14 +2213,14 @@
 if test "$ac_cv_sizeof_int" -lt 4 ; then
 	AC_MSG_WARN([OpenLDAP requires 'int' to be 32 bits or greater.])
 
-	AC_DEFINE(LBER_INT_T,long)
+	AC_DEFINE(LBER_INT_T,long,[LBER boolean, enum, integers (32 bits or larger)])
 else
 	AC_DEFINE(LBER_INT_T,int)
 fi
 
-AC_DEFINE(LBER_LEN_T,long)
-AC_DEFINE(LBER_SOCKET_T,int)
-AC_DEFINE(LBER_TAG_T,long)
+AC_DEFINE(LBER_LEN_T,long,[LBER lengths (32 bits or larger)])
+AC_DEFINE(LBER_SOCKET_T,int,[LBER socket descriptor])
+AC_DEFINE(LBER_TAG_T,long,[LBER tags (32 bits or larger)])
 
 dnl ----------------------------------------------------------------
 dnl Checks for library functions.
@@ -2364,14 +2365,14 @@
 		[define this to add syslog code])
 fi
 if test "$ol_link_kbind" != no ; then
-	AC_DEFINE(LDAP_API_FEATURE_X_OPENLDAP_V2_KBIND,LDAP_VENDOR_VERSION)
+	AC_DEFINE(LDAP_API_FEATURE_X_OPENLDAP_V2_KBIND,LDAP_VENDOR_VERSION,[LDAP v2 Kerberos Bind])
 fi
 if test "$ol_enable_proctitle" != no ; then
 	AC_DEFINE(LDAP_PROCTITLE,1,
 		[define this for LDAP process title support])
 fi
 if test "$ol_enable_referrals" != no ; then
-	AC_DEFINE(LDAP_API_FEATURE_X_OPENLDAP_V2_REFERRALS,LDAP_VENDOR_VERSION)
+	AC_DEFINE(LDAP_API_FEATURE_X_OPENLDAP_V2_REFERRALS,LDAP_VENDOR_VERSION,[LDAP v2 Referrals])
 fi
 if test "$ol_enable_local" != no; then
 	AC_DEFINE(LDAP_PF_LOCAL,1,[define to support PF_LOCAL])
