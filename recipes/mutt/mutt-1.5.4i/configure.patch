
#
# Patch managed by http://www.mn-logistik.de/unsupported/pxa250/patcher
#

--- mutt-1.5.4/./configure.in~configure
+++ mutt-1.5.4/./configure.in
@@ -3,8 +3,9 @@
 dnl !!! WHEN ADDING NEW CONFIGURE TESTS, PLEASE ADD CODE TO MAIN.C !!!
 dnl !!! TO DUMP THEIR RESULTS WHEN MUTT -V IS CALLED            !!!
 
-AC_PREREQ(2.12)
-AC_INIT(mutt.h)
+AC_PREREQ(2.57)
+AC_INIT
+AC_CONFIG_SRCDIR([mutt.h])
 AM_CONFIG_HEADER(config.h)
 
 mutt_cv_version=`cat $srcdir/VERSION`
@@ -151,7 +152,7 @@
 
 AC_ARG_WITH(slang, [  --with-slang[=DIR]         Use S-Lang instead of ncurses],
         [AC_CACHE_CHECK([if this is a BSD system], mutt_cv_bsdish,
-                [AC_TRY_RUN([#include <sys/param.h>
+                [AC_RUN_IFELSE([AC_LANG_SOURCE([[#include <sys/param.h>
 
 main ()
 {
@@ -160,10 +161,7 @@
 #else
         exit (1);
 #endif
-}],
-                        mutt_cv_bsdish=yes,
-                        mutt_cv_bsdish=no,
-                        mutt_cv_bsdish=no)])
+}]])],[mutt_cv_bsdish=yes],[mutt_cv_bsdish=no],[mutt_cv_bsdish=no])])
 
         AC_MSG_CHECKING(for S-Lang)
         if test $withval = yes; then
@@ -294,7 +292,8 @@
     AC_DEFINE(SIG_ATOMIC_VOLATILE_T, [volatile sig_atomic_t])
 fi
 
-AC_DECL_SYS_SIGLIST
+AC_CHECK_DECLS([sys_siglist])
+
 
 dnl For MD5 and SHA1 on 64-bit systems
 AC_C_BIGENDIAN
@@ -302,7 +301,7 @@
 dnl This is the method autoconf-2.50's new AC_CHECK_TYPE macro uses.
 dnl We need to be backwards compatible to autoconf 2.13, though. -lh
 AC_MSG_CHECKING(for uint32_t)
-AC_TRY_COMPILE([
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #include <sys/types.h>
 #if HAVE_INTTYPES_H
 #include <inttypes.h>
@@ -310,16 +309,15 @@
 #if HAVE_STDINT_H
 #include <stdint.h>
 #endif
-#endif],
-[if ((uint32_t *) 0)
+#endif]], [[if ((uint32_t *) 0)
   return 0;
 if (sizeof (uint32_t))
   return 0;
-],[
+]])],[
     AC_DEFINE(HAVE_UINT32_T,1,[ Define if you have the uint32_t type. ])
     AC_MSG_RESULT(yes)
-  ], AC_MSG_RESULT(no)
-)
+  ],[AC_MSG_RESULT(no)
+])
 AC_CHECK_SIZEOF(int)
 AC_CHECK_SIZEOF(long)
 
@@ -339,8 +337,7 @@
 AC_CHECK_FUNCS(snprintf, , [mutt_cv_snprintf=yes])
 AC_CHECK_FUNCS(vsnprintf, , [mutt_cv_snprintf=yes])
 if test $mutt_cv_snprintf = yes; then
-#        AC_LIBOBJ(snprintf)
-        LIBOBJS="$LIBOBJS snprintf.o"
+        AC_LIBOBJ(snprintf)
 fi
 
 dnl SCO uses chsize() instead of ftruncate()
@@ -359,21 +356,19 @@
 if test $mutt_cv_regex = no ; then
 AC_CACHE_CHECK([whether your system's regexp library is completely broken],
         [mutt_cv_regex_broken],
-        AC_TRY_RUN([
+        AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <unistd.h>
 #include <regex.h>
-main() { regex_t blah ; regmatch_t p; p.rm_eo = p.rm_eo; return regcomp(&blah, "foo.*bar", REG_NOSUB) || regexec (&blah, "foobar", 0, NULL, 0); }],
-        mutt_cv_regex_broken=no, mutt_cv_regex_broken=yes, mutt_cv_regex_broken=yes))
+main() { regex_t blah ; regmatch_t p; p.rm_eo = p.rm_eo; return regcomp(&blah, "foo.*bar", REG_NOSUB) || regexec (&blah, "foobar", 0, NULL, 0); }]])],[mutt_cv_regex_broken=no],[mutt_cv_regex_broken=yes],[mutt_cv_regex_broken=yes]))
         if test $mutt_cv_regex_broken = yes ; then
-                echo "Using the included GNU regex instead." >&AC_FD_MSG
+                echo "Using the included GNU regex instead." >&AS_MESSAGE_FD([])
                 mutt_cv_regex=yes
         fi
 fi
 
 if test $mutt_cv_regex = yes; then
         AC_DEFINE(USE_GNU_REGEX,1,[ Define if you want to use the included regex.c. ])
-###     AC_LIBOBJ(regex)
-        LIBOBJS="$LIBOBJS regex.o"
+        AC_LIBOBJ(regex)
 fi
 
 
@@ -410,7 +405,7 @@
         fi
         AC_DEFINE_UNQUOTED(MAILPATH,"$mutt_cv_mailpath",[ Where new mail is spooled. ])
 
-        AC_CACHE_CHECK(if $mutt_cv_mailpath is world writable, mutt_cv_worldwrite, [AC_TRY_RUN([#include <sys/types.h>
+        AC_CACHE_CHECK(if $mutt_cv_mailpath is world writable, mutt_cv_worldwrite, [AC_RUN_IFELSE([AC_LANG_SOURCE([[#include <sys/types.h>
 #include <sys/stat.h>
 
 int main (int argc, char **argv)
@@ -420,14 +415,14 @@
         stat ("$mutt_cv_mailpath", &s);
         if (s.st_mode & S_IWOTH) exit (0);
         exit (1);
-}], mutt_cv_worldwrite=yes, mutt_cv_worldwrite=no, mutt_cv_worldwrite=no)])
+}]])],[mutt_cv_worldwrite=yes],[mutt_cv_worldwrite=no],[mutt_cv_worldwrite=no])])
 
         mutt_cv_setgid=no
         if test $mutt_cv_worldwrite = yes; then
                 AC_DEFINE(USE_DOTLOCK,1,[ Define to use dotlocking for mailboxes. ])
         else
 
-                AC_CACHE_CHECK(if $mutt_cv_mailpath is group writable, mutt_cv_groupwrite, [AC_TRY_RUN([#include <sys/types.h>
+                AC_CACHE_CHECK(if $mutt_cv_mailpath is group writable, mutt_cv_groupwrite, [AC_RUN_IFELSE([AC_LANG_SOURCE([[#include <sys/types.h>
 #include <sys/stat.h>
 
 int main (int argc, char **argv)
@@ -437,7 +432,7 @@
         stat ("$mutt_cv_mailpath", &s);
         if (s.st_mode & S_IWGRP) exit (0);
         exit (1);
-}], mutt_cv_groupwrite=yes, mutt_cv_groupwrite=no, mutt_cv_groupwrite=no)])
+}]])],[mutt_cv_groupwrite=yes],[mutt_cv_groupwrite=no],[mutt_cv_groupwrite=no])])
 
                 if test $mutt_cv_groupwrite = yes; then
                         AC_DEFINE(USE_DOTLOCK,1,[ Define to use dotlocking for mailboxes. ])
@@ -813,7 +808,7 @@
 AC_CACHE_CHECK([whether this iconv is good enough], mutt_cv_iconv_good,
         mutt_save_LIBS="$LIBS"
         LIBS="$LIBS $LIBICONV"
-        AC_TRY_RUN([
+        AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <iconv.h>
 int main()
 {
@@ -829,10 +824,7 @@
            !(ob == buf && obl == sizeof(buf)) ||
            iconv_close(cd)));
 }
-                ],
-                mutt_cv_iconv_good=yes,
-                mutt_cv_iconv_good=no,
-                mutt_cv_iconv_good=yes)
+                ]])],[mutt_cv_iconv_good=yes],[mutt_cv_iconv_good=no],[mutt_cv_iconv_good=yes])
         LIBS="$mutt_save_LIBS")
 if test "$mutt_cv_iconv_good" = no; then
   AC_MSG_ERROR(Try using libiconv instead)
@@ -844,7 +836,7 @@
 AC_CACHE_CHECK([whether iconv is non-transcribing], mutt_cv_iconv_nontrans,
         mutt_save_LIBS="$LIBS"
         LIBS="$LIBS $LIBICONV"
-        AC_TRY_RUN([
+        AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <iconv.h>
 #include <string.h>
 int main()
@@ -861,10 +853,7 @@
   return ((cd = iconv_open("UTF-8", "UTF-8")) == (iconv_t)(-1) ||
           iconv(cd, &ib, &ibl, &ob, &obl));
 }
-                ],
-                mutt_cv_iconv_nontrans=no,
-                mutt_cv_iconv_nontrans=yes,
-                mutt_cv_iconv_nontrans=no)
+                ]])],[mutt_cv_iconv_nontrans=no],[mutt_cv_iconv_nontrans=yes],[mutt_cv_iconv_nontrans=no])
         LIBS="$mutt_save_LIBS")
 if test "$mutt_cv_iconv_nontrans" = yes; then
   AC_DEFINE(ICONV_NONTRANS, 1)
@@ -888,32 +877,26 @@
 AC_CHECK_HEADERS(wchar.h)
 
 AC_CACHE_CHECK([for wchar_t], mutt_cv_wchar_t,
-        AC_TRY_COMPILE([
+        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #include <stddef.h>
 #include <stdlib.h>
 #ifdef HAVE_WCHAR_H
 #include <wchar.h>
 #endif
-                ],
-                [ wchar_t wc; return 0; ],
-                mutt_cv_wchar_t=yes,
-                mutt_cv_wchar_t=no))
+                ]], [[ wchar_t wc; return 0; ]])],[mutt_cv_wchar_t=yes],[mutt_cv_wchar_t=no]))
 
 if test "$mutt_cv_wchar_t" = no; then
         AC_DEFINE(wchar_t,int,[ Define to 'int' if system headers don't define. ])
 fi
 
 AC_CACHE_CHECK([for wint_t], mutt_cv_wint_t,
-        AC_TRY_COMPILE([
+        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #include <stddef.h>
 #include <stdlib.h>
 #ifdef HAVE_WCHAR_H
 #include <wchar.h>
 #endif
-                ],
-                [ wint_t wc; return 0; ],
-                mutt_cv_wint_t=yes,
-                mutt_cv_wint_t=no))
+                ]], [[ wint_t wc; return 0; ]])],[mutt_cv_wint_t=yes],[mutt_cv_wint_t=no]))
 
 if test "$mutt_cv_wint_t" = no; then
         AC_DEFINE(wint_t,int,[ Define to 'int' if system headers don't define. ])
@@ -925,16 +908,13 @@
 AC_CHECK_FUNCS(iswxdigit towupper towlower)
 
 AC_CACHE_CHECK([for mbstate_t], mutt_cv_mbstate_t,
-        AC_TRY_COMPILE([
+        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #include <stddef.h>
 #include <stdlib.h>
 #ifdef HAVE_WCHAR_H
 #include <wchar.h>
 #endif
-                ],
-                [ mbstate_t s; return 0; ],
-                mutt_cv_mbstate_t=yes,
-                mutt_cv_mbstate_t=no))
+                ]], [[ mbstate_t s; return 0; ]])],[mutt_cv_mbstate_t=yes],[mutt_cv_mbstate_t=no]))
 
 if test "$mutt_cv_mbstate_t" = no; then
         AC_DEFINE(mbstate_t,int,[ Define to 'int' if system headers don't define. ])
@@ -947,7 +927,7 @@
 if test "$wc_funcs" != yes -a "$wc_funcs" != no; then
         AC_CACHE_CHECK([for wchar_t functions], mutt_cv_wc_funcs,
                 mutt_cv_wc_funcs=no
-                AC_TRY_LINK([
+                AC_LINK_IFELSE([AC_LANG_PROGRAM([[
 #define _XOPEN_SOURCE 1
 #include <stddef.h>
 #include <stdlib.h>
@@ -956,10 +936,8 @@
 #endif
 #ifdef HAVE_WCHAR_H
 #include <wchar.h>
-#endif],
-                        [mbrtowc(0, 0, 0, 0); wctomb(0, 0); wcwidth(0);
-        iswprint(0); iswspace(0); towlower(0); towupper(0); iswalnum(0)],
-                        mutt_cv_wc_funcs=yes))
+#endif]], [[mbrtowc(0, 0, 0, 0); wctomb(0, 0); wcwidth(0);
+        iswprint(0); iswspace(0); towlower(0); towupper(0); iswalnum(0)]])],[mutt_cv_wc_funcs=yes],[]))
         wc_funcs=$mutt_cv_wc_funcs
 fi
 
@@ -968,26 +946,21 @@
 fi
 
 AC_CACHE_CHECK([for nl_langinfo and CODESET], mutt_cv_langinfo_codeset,
-  [AC_TRY_LINK([#include <langinfo.h>],
-    [char* cs = nl_langinfo(CODESET);],
-    mutt_cv_langinfo_codeset=yes,
-    mutt_cv_langinfo_codeset=no)])
+  [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <langinfo.h>]], [[char* cs = nl_langinfo(CODESET);]])],[mutt_cv_langinfo_codeset=yes],[mutt_cv_langinfo_codeset=no])])
 if test $mutt_cv_langinfo_codeset = yes; then
   AC_DEFINE(HAVE_LANGINFO_CODESET,1,[ Define if you have <langinfo.h> and nl_langinfo(CODESET). ])
 fi
 
 AC_CACHE_CHECK([for nl_langinfo and YESEXPR], mutt_cv_langinfo_yesexpr,
-  [AC_TRY_LINK([#include <langinfo.h>],
-    [char* cs = nl_langinfo(YESEXPR);],
-    mutt_cv_langinfo_yesexpr=yes,
-    mutt_cv_langinfo_yesexpr=no)])
+  [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <langinfo.h>]], [[char* cs = nl_langinfo(YESEXPR);]])],[mutt_cv_langinfo_yesexpr=yes],[mutt_cv_langinfo_yesexpr=no])])
 if test $mutt_cv_langinfo_yesexpr = yes; then
   AC_DEFINE(HAVE_LANGINFO_YESEXPR,1,[ Define if you have <langinfo.h> and nl_langinfo(YESEXPR). ])
 fi
 
-AC_OUTPUT(Makefile intl/Makefile m4/Makefile
+AC_CONFIG_FILES([Makefile intl/Makefile m4/Makefile
         po/Makefile.in doc/Makefile contrib/Makefile
         muttbug.sh
         imap/Makefile
         Muttrc.head
-        doc/instdoc.sh)
+        doc/instdoc.sh])
+AC_OUTPUT
