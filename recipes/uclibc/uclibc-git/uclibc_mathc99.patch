Index: uClibc/test/math/libm-test.inc
===================================================================
--- uClibc.orig/test/math/libm-test.inc	2008-07-25 11:03:24.000000000 +0200
+++ uClibc/test/math/libm-test.inc	2008-08-28 10:54:29.714525665 +0200
@@ -3414,7 +3414,6 @@
 }
 
 
-#if 0
 static void
 log2_test (void)
 {
@@ -3444,7 +3443,6 @@
 
   END (log2);
 }
-#endif
 
 
 static void
@@ -4967,9 +4965,7 @@
   log_test ();
   log10_test ();
   log1p_test ();
-#if 0
   log2_test ();
-#endif
   logb_test ();
   modf_test ();
   ilogb_test ();
Index: uClibc/libm/Makefile.in
===================================================================
--- uClibc.orig/libm/Makefile.in	2008-07-25 11:03:27.000000000 +0200
+++ uClibc/libm/Makefile.in	2008-08-28 10:54:29.714525665 +0200
@@ -62,7 +62,7 @@
 libm_CSRC := \
 	e_acos.c e_acosh.c e_asin.c e_atan2.c e_atanh.c e_cosh.c \
 	e_exp.c e_fmod.c e_gamma.c e_gamma_r.c e_hypot.c e_j0.c \
-	e_j1.c e_jn.c e_lgamma.c e_lgamma_r.c e_log.c e_log10.c \
+	e_j1.c e_jn.c e_lgamma.c e_lgamma_r.c e_log.c e_log2.c e_log10.c \
 	e_pow.c e_remainder.c e_rem_pio2.c e_scalb.c e_sinh.c \
 	e_sqrt.c k_cos.c k_rem_pio2.c k_sin.c k_standard.c k_tan.c \
 	s_asinh.c s_atan.c s_cbrt.c s_ceil.c s_copysign.c s_cos.c \
@@ -73,7 +73,7 @@
 	s_tanh.c s_trunc.c w_acos.c w_acosh.c w_asin.c w_atan2.c w_atanh.c \
 	w_cabs.c w_cosh.c w_drem.c w_exp.c w_fmod.c w_gamma.c w_gamma_r.c \
 	w_hypot.c w_j0.c w_j1.c w_jn.c w_lgamma.c w_lgamma_r.c \
-	w_log.c w_log10.c w_pow.c w_remainder.c w_scalb.c w_sinh.c \
+	w_log.c w_log2.c w_log10.c w_pow.c w_remainder.c w_scalb.c w_sinh.c \
 	w_sqrt.c fpmacros.c nan.c carg.c s_llrint.c
 FL_MOBJ := \
 	acosf.o acoshf.o asinf.o asinhf.o atan2f.o atanf.o atanhf.o cbrtf.o \
@@ -89,10 +89,10 @@
 libm_CSRC := \
 	w_acos.c w_asin.c s_atan.c w_atan2.c s_ceil.c s_cos.c \
 	w_cosh.c w_exp.c s_fabs.c s_floor.c w_fmod.c s_frexp.c \
-	s_ldexp.c w_log.c w_log10.c s_modf.c w_pow.c s_sin.c \
+	s_ldexp.c w_log.c w_log2.c w_log10.c s_modf.c w_pow.c s_sin.c \
 	w_sinh.c w_sqrt.c s_tan.c s_tanh.c \
 	s_expm1.c s_scalbn.c s_copysign.c e_acos.c e_asin.c e_atan2.c \
-	k_cos.c e_cosh.c e_exp.c e_fmod.c e_log.c e_log10.c e_pow.c \
+	k_cos.c e_cosh.c e_exp.c e_fmod.c e_log.c e_log2.c e_log10.c e_pow.c \
 	k_sin.c e_sinh.c e_sqrt.c k_tan.c e_rem_pio2.c k_rem_pio2.c \
 	s_finite.c
 # We'll add sqrtf to avoid problems with libstdc++
Index: uClibc/libm/w_log2.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ uClibc/libm/w_log2.c	2008-08-28 10:58:48.676013259 +0200
@@ -0,0 +1,33 @@
+/*
+ * wrapper log2(X)
+ */
+
+#include "math.h"
+#include "math_private.h"
+
+libm_hidden_proto(log2)
+#ifdef __STDC__
+	double log2(double x)		/* wrapper log */
+#else
+	double log2(x)			/* wrapper log */
+	double x;
+#endif
+{
+#ifdef _IEEE_LIBM
+  return __ieee754_log2 (x);
+#else
+  double z;
+  z = __ieee754_log2 (x);
+  if (_LIB_VERSION == _IEEE_ || __isnan (x)) return z;
+  if (x <= 0.0)
+    {
+      if (x == 0.0)
+	return __kernel_standard (x, x, 48); /* log2 (0) */
+      else
+	return __kernel_standard (x, x, 49); /* log2 (x < 0) */
+    }
+  else
+    return z;
+#endif
+}
+libm_hidden_def(log2)
Index: uClibc/libm/e_log2.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ uClibc/libm/e_log2.c	2008-08-28 10:54:29.717859030 +0200
@@ -0,0 +1,130 @@
+/* Adapted for log2 by Ulrich Drepper <drepper@cygnus.com>.  */
+/*
+ * ====================================================
+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
+ *
+ * Developed at SunPro, a Sun Microsystems, Inc. business.
+ * Permission to use, copy, modify, and distribute this
+ * software is freely granted, provided that this notice
+ * is preserved.
+ * ====================================================
+ */
+
+/* __ieee754_log2(x)
+ * Return the logarithm to base 2 of x
+ *
+ * Method :
+ *   1. Argument Reduction: find k and f such that
+ *			x = 2^k * (1+f),
+ *	   where  sqrt(2)/2 < 1+f < sqrt(2) .
+ *
+ *   2. Approximation of log(1+f).
+ *	Let s = f/(2+f) ; based on log(1+f) = log(1+s) - log(1-s)
+ *		 = 2s + 2/3 s**3 + 2/5 s**5 + .....,
+ *	     	 = 2s + s*R
+ *      We use a special Reme algorithm on [0,0.1716] to generate
+ * 	a polynomial of degree 14 to approximate R The maximum error
+ *	of this polynomial approximation is bounded by 2**-58.45. In
+ *	other words,
+ *		        2      4      6      8      10      12      14
+ *	    R(z) ~ Lg1*s +Lg2*s +Lg3*s +Lg4*s +Lg5*s  +Lg6*s  +Lg7*s
+ *  	(the values of Lg1 to Lg7 are listed in the program)
+ *	and
+ *	    |      2          14          |     -58.45
+ *	    | Lg1*s +...+Lg7*s    -  R(z) | <= 2
+ *	    |                             |
+ *	Note that 2s = f - s*f = f - hfsq + s*hfsq, where hfsq = f*f/2.
+ *	In order to guarantee error in log below 1ulp, we compute log
+ *	by
+ *		log(1+f) = f - s*(f - R)	(if f is not too large)
+ *		log(1+f) = f - (hfsq - s*(hfsq+R)).	(better accuracy)
+ *
+ *	3. Finally,  log(x) = k + log(1+f).
+ *			    = k+(f-(hfsq-(s*(hfsq+R))))
+ *
+ * Special cases:
+ *	log2(x) is NaN with signal if x < 0 (including -INF) ;
+ *	log2(+INF) is +INF; log(0) is -INF with signal;
+ *	log2(NaN) is that NaN with no signal.
+ *
+ * Constants:
+ * The hexadecimal values are the intended ones for the following
+ * constants. The decimal values may be used, provided that the
+ * compiler will convert from decimal to binary accurately enough
+ * to produce the hexadecimal values shown.
+ */
+
+#include "math.h"
+#include "math_private.h"
+
+#ifdef __STDC__
+static const double
+#else
+static double
+#endif
+ln2 = 0.69314718055994530942,
+two54   =  1.80143985094819840000e+16,  /* 43500000 00000000 */
+Lg1 = 6.666666666666735130e-01,  /* 3FE55555 55555593 */
+Lg2 = 3.999999999940941908e-01,  /* 3FD99999 9997FA04 */
+Lg3 = 2.857142874366239149e-01,  /* 3FD24924 94229359 */
+Lg4 = 2.222219843214978396e-01,  /* 3FCC71C5 1D8E78AF */
+Lg5 = 1.818357216161805012e-01,  /* 3FC74664 96CB03DE */
+Lg6 = 1.531383769920937332e-01,  /* 3FC39A09 D078C69F */
+Lg7 = 1.479819860511658591e-01;  /* 3FC2F112 DF3E5244 */
+
+#ifdef __STDC__
+static const double zero   =  0.0;
+#else
+static double zero   =  0.0;
+#endif
+
+#ifdef __STDC__
+	double attribute_hidden __ieee754_log2(double x)
+#else
+	double attribute_hidden __ieee754_log2(x)
+	double x;
+#endif
+{
+	double hfsq,f,s,z,R,w,t1,t2,dk;
+	int32_t k,hx,i,j;
+	u_int32_t lx;
+
+	EXTRACT_WORDS(hx,lx,x);
+
+	k=0;
+	if (hx < 0x00100000) {			/* x < 2**-1022  */
+	    if (((hx&0x7fffffff)|lx)==0)
+		return -two54/(x-x);		/* log(+-0)=-inf */
+	    if (hx<0) return (x-x)/(x-x);	/* log(-#) = NaN */
+	    k -= 54; x *= two54; /* subnormal number, scale up x */
+	    GET_HIGH_WORD(hx,x);
+	}
+	if (hx >= 0x7ff00000) return x+x;
+	k += (hx>>20)-1023;
+	hx &= 0x000fffff;
+	i = (hx+0x95f64)&0x100000;
+	SET_HIGH_WORD(x,hx|(i^0x3ff00000));	/* normalize x or x/2 */
+	k += (i>>20);
+	dk = (double) k;
+	f = x-1.0;
+	if((0x000fffff&(2+hx))<3) {	/* |f| < 2**-20 */
+	    if(f==zero) return dk;
+	    R = f*f*(0.5-0.33333333333333333*f);
+	    return dk-(R-f)/ln2;
+	}
+ 	s = f/(2.0+f);
+	z = s*s;
+	i = hx-0x6147a;
+	w = z*z;
+	j = 0x6b851-hx;
+	t1= w*(Lg2+w*(Lg4+w*Lg6));
+	t2= z*(Lg1+w*(Lg3+w*(Lg5+w*Lg7)));
+	i |= j;
+	R = t2+t1;
+	if(i>0) {
+	    hfsq=0.5*f*f;
+	    return dk-((hfsq-(s*(hfsq+R)))-f)/ln2;
+	} else {
+	    return dk-((s*(f-R))-f)/ln2;
+	}
+}
Index: uClibc/libm/math_private.h
===================================================================
--- uClibc.orig/libm/math_private.h	2008-05-07 00:23:27.000000000 +0200
+++ uClibc/libm/math_private.h	2008-08-28 10:54:29.717859030 +0200
@@ -158,6 +158,7 @@
 extern double __ieee754_acos (double) attribute_hidden;
 extern double __ieee754_acosh (double) attribute_hidden;
 extern double __ieee754_log (double) attribute_hidden;
+extern double __ieee754_log2 (double) attribute_hidden;
 extern double __ieee754_atanh (double) attribute_hidden;
 extern double __ieee754_asin (double) attribute_hidden;
 extern double __ieee754_atan2 (double,double) attribute_hidden;
Index: uClibc/libm/float_wrappers.c
===================================================================
--- uClibc.orig/libm/float_wrappers.c	2008-05-07 00:23:27.000000000 +0200
+++ uClibc/libm/float_wrappers.c	2008-08-28 10:54:29.717859030 +0200
@@ -20,7 +20,6 @@
 #undef L_fmaf          /*float       fmaf(float, float, float);*/
 #undef L_fmaxf         /*float       fmaxf(float, float);*/
 #undef L_fminf         /*float       fminf(float, float);*/
-#undef L_log2f         /*float       log2f(float);*/
 #undef L_nearbyintf    /*float       nearbyintf(float);*/
 #undef L_nexttowardf   /*float       nexttowardf(float, long double);*/
 #undef L_remquof       /*float       remquof(float, float, int *);*/
@@ -55,6 +54,7 @@
 float       lgammaf(float);
 long long   llroundf(float);
 float       log10f(float);
+float       log2f(float);
 float       log1pf(float);
 float       logbf(float);
 float       logf(float);
