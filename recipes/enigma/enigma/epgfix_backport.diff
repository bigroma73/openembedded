diff -Naur enigma/include/lib/dvb/epgcache.h enigma_fix/include/lib/dvb/epgcache.h
--- enigma/include/lib/dvb/epgcache.h	2008-02-18 17:35:38.000000000 +0100
+++ enigma_fix/include/lib/dvb/epgcache.h	2008-02-18 17:06:58.000000000 +0100
@@ -315,7 +315,7 @@
 
 	int state;
 	__u8 isRunning, firstStart, haveData;
-	void FixOverlapping(std::pair<eventMap,timeMap> &, time_t, int, const timeMap::iterator &, const uniqueEPGKey &);
+	bool FixOverlapping(std::pair<eventMap,timeMap> &, time_t, int, const timeMap::iterator &, const uniqueEPGKey &);
 	int sectionRead(__u8 *data, int source);
 	static eEPGCache *instance;
 
diff -Naur enigma/lib/dvb/epgcache.cpp enigma_fix/lib/dvb/epgcache.cpp
--- enigma/lib/dvb/epgcache.cpp	2008-02-18 17:35:38.000000000 +0100
+++ enigma_fix/lib/dvb/epgcache.cpp	2008-02-18 17:34:01.000000000 +0100
@@ -325,7 +325,7 @@
 					int sid = data[ptr++] << 8;
 					sid |= data[ptr++];
 
-// WORKAROUND for wrong transmitted epg data (01.08.2006)
+// WORKAROUND for wrong transmitted epg data (01.10.2007)
 					if ( onid == 0x85 )
 					{
 						switch( (tsid << 16) | sid )
@@ -336,6 +336,7 @@
 							case 0x0300f5: sid = 0xdc; break;
 							case 0x0400d2: sid = 0xe2; tsid = 0x11; break;
 							case 0x1100d3: sid = 0xe3; break;
+							case 0x0100d4: sid = 0xe4; tsid = 4; break;
 						}
 					}
 ////////////////////////////////////////////
@@ -448,8 +449,9 @@
 }
 #endif // ENABLE_PRIVATE_EPG
 
-void eEPGCache::FixOverlapping(std::pair<eventMap,timeMap> &servicemap, time_t TM, int duration, const timeMap::iterator &tm_it, const uniqueEPGKey &service)
+bool eEPGCache::FixOverlapping(std::pair<eventMap,timeMap> &servicemap, time_t TM, int duration, const timeMap::iterator &tm_it, const uniqueEPGKey &service)
 {
+	bool ret = false;
 	timeMap::iterator tmp = tm_it;
 	while ((tmp->first+tmp->second->getDuration()-300) > TM)
 	{
@@ -464,6 +466,20 @@
 		{
 			__u16 event_id = tmp->second->getEventID();
 			servicemap.first.erase(event_id);
+#ifdef EPG_DEBUG  
+			{
+				EITEvent evt((eit_event_struct *)tmp->second->get(), service.tsid<<16|service.onid);
+				char tmp[255];
+				struct tm t;
+				localtime_r(&evt.start_time, &t);
+				snprintf(tmp, 255, "%08x(%d), %d seconds, %02d.%02d, %02d:%02d",
+					evt.event_id, evt.event_id,
+					evt.duration,
+					t.tm_mday, t.tm_mon+1,
+					t.tm_hour, t.tm_min);
+				eDebug("(1)erase no more used event %s", tmp);
+			}
+#endif
 			delete tmp->second;
 			if (tmp == servicemap.second.begin())
 			{
@@ -472,6 +488,7 @@
 			}
 			else
 				servicemap.second.erase(tmp--);
+			ret = true;
 		}
 		else
 		{
@@ -495,14 +512,30 @@
 		{
 			__u16 event_id = tmp->second->getEventID();
 			servicemap.first.erase(event_id);
+#ifdef EPG_DEBUG
+			{
+				EITEvent evt((eit_event_struct *)tmp->second->get(), service.tsid<<16|service.onid);
+				char tmp[255];
+				struct tm t;
+				localtime_r(&evt.start_time, &t);
+				snprintf(tmp, 255, "%08x(%d), %d seconds, %02d.%02d, %02d:%02d",
+					evt.event_id, evt.event_id,
+					evt.duration,
+					t.tm_mday, t.tm_mon+1,
+					t.tm_hour, t.tm_min);
+				eDebug("(2)erase no more used event %s", tmp);
+			}
+#endif
 			delete tmp->second;
 			servicemap.second.erase(tmp++);
+			ret = true;
 		}
 		else
 			++tmp;
 		if (tmp == servicemap.second.end())
 			break;
 	}
+	return ret;
 }
 
 int eEPGCache::sectionRead(__u8 *data, int source)
@@ -560,7 +593,11 @@
 		if ( data[ptr-1] < 0x40 )
 			--ptr;
 
-		uniqueEPGKey service( HILO(eit->service_id), HILO(eit->original_network_id), HILO(eit->transport_stream_id) );
+		// Cablecom HACK.. for incorrect tsid/onid in eit data
+		bool use_transponder_chid = source == SCHEDULE || (source == NOWNEXT && data[0] == 0x4E);
+		uniqueEPGKey service( HILO(eit->service_id), 
+		    use_transponder_chid ? current_service.onid : HILO(eit->original_network_id), 
+		    use_transponder_chid ? current_service.tsid : HILO(eit->transport_stream_id) );
 
 		eit_event_struct* eit_event = (eit_event_struct*) (data+ptr);
 		int eit_event_size;
@@ -658,7 +695,11 @@
 							eventData *tmp = ev_it->second;
 							ev_it->second = tm_it_tmp->second =
 								new eventData(eit_event, eit_event_size, source);
-							FixOverlapping(servicemap, TM, duration, tm_it_tmp, service);
+							if (FixOverlapping(servicemap, TM, duration, tm_it_tmp, service))
+							{
+								prevEventIt = servicemap.first.end();
+								prevTimeIt = servicemap.second.end();
+							}
 							delete tmp;
 							goto next;
 						}
@@ -730,8 +771,6 @@
 					tm_it=prevTimeIt=servicemap.second.insert( prevTimeIt, std::pair<const time_t, eventData*>( TM, evt ) );
 				}
 
-				FixOverlapping(servicemap, TM, duration, tm_it, service);
-
 #if EPG_DEBUG
 				if ( consistencyCheck )
 				{
@@ -751,6 +790,11 @@
 							ev_it->first, event_id );
 				}
 #endif
+				if (FixOverlapping(servicemap, TM, duration, tm_it, service))
+				{
+					prevEventIt = servicemap.first.end();
+					prevTimeIt = servicemap.second.end();
+				}
 			}
 next:
 #if EPG_DEBUG
