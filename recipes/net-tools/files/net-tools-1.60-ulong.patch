diff -urN net-tools-1.60/statistics.c net-tools-1.60-patch/statistics.c
--- net-tools-1.60/statistics.c	2001-02-02 10:01:23.000000000 -0800
+++ net-tools-1.60-patch/statistics.c	2004-06-15 11:09:44.000000000 -0700
@@ -63,54 +63,54 @@
 struct entry Iptab[] =
 {
     {"Forwarding", N_("Forwarding is %s"), i_forward | I_STATIC},
-    {"DefaultTTL", N_("Default TTL is %u"), number | I_STATIC},
-    {"InReceives", N_("%u total packets received"), number},
-    {"InHdrErrors", N_("%u with invalid headers"), opt_number},
-    {"InAddrErrors", N_("%u with invalid addresses"), opt_number},
-    {"ForwDatagrams", N_("%u forwarded"), number},
-    {"InUnknownProtos", N_("%u with unknown protocol"), opt_number},
-    {"InDiscards", N_("%u incoming packets discarded"), number},
-    {"InDelivers", N_("%u incoming packets delivered"), number},
-    {"OutRequests", N_("%u requests sent out"), number},	/*? */
-    {"OutDiscards", N_("%u outgoing packets dropped"), opt_number},
-    {"OutNoRoutes", N_("%u dropped because of missing route"), opt_number},
-    {"ReasmTimeout", N_("%u fragments dropped after timeout"), opt_number},
-    {"ReasmReqds", N_("%u reassemblies required"), opt_number},	/* ? */
-    {"ReasmOKs", N_("%u packets reassembled ok"), opt_number},
-    {"ReasmFails", N_("%u packet reassembles failed"), opt_number},
-    {"FragOKs", N_("%u fragments received ok"), opt_number},
-    {"FragFails", N_("%u fragments failed"), opt_number},
-    {"FragCreates", N_("%u fragments created"), opt_number}
+    {"DefaultTTL", N_("Default TTL is %lu"), number | I_STATIC},
+    {"InReceives", N_("%lu total packets received"), number},
+    {"InHdrErrors", N_("%lu with invalid headers"), opt_number},
+    {"InAddrErrors", N_("%lu with invalid addresses"), opt_number},
+    {"ForwDatagrams", N_("%lu forwarded"), number},
+    {"InUnknownProtos", N_("%lu with unknown protocol"), opt_number},
+    {"InDiscards", N_("%lu incoming packets discarded"), number},
+    {"InDelivers", N_("%lu incoming packets delivered"), number},
+    {"OutRequests", N_("%lu requests sent out"), number},	/*? */
+    {"OutDiscards", N_("%lu outgoing packets dropped"), opt_number},
+    {"OutNoRoutes", N_("%lu dropped because of missing route"), opt_number},
+    {"ReasmTimeout", N_("%lu fragments dropped after timeout"), opt_number},
+    {"ReasmReqds", N_("%lu reassemblies required"), opt_number},	/* ? */
+    {"ReasmOKs", N_("%lu packets reassembled ok"), opt_number},
+    {"ReasmFails", N_("%lu packet reassembles failed"), opt_number},
+    {"FragOKs", N_("%lu fragments received ok"), opt_number},
+    {"FragFails", N_("%lu fragments failed"), opt_number},
+    {"FragCreates", N_("%lu fragments created"), opt_number}
 };
 
 struct entry Icmptab[] =
 {
-    {"InMsgs", N_("%u ICMP messages received"), number},
-    {"InErrors", N_("%u input ICMP message failed."), number},
-    {"InDestUnreachs", N_("destination unreachable: %u"), i_inp_icmp | I_TITLE},
-    {"InTimeExcds", N_("timeout in transit: %u"), i_inp_icmp | I_TITLE},
-    {"InParmProbs", N_("wrong parameters: %u"), i_inp_icmp | I_TITLE},	/*? */
-    {"InSrcQuenchs", N_("source quenches: %u"), i_inp_icmp | I_TITLE},
-    {"InRedirects", N_("redirects: %u"), i_inp_icmp | I_TITLE},
-    {"InEchos", N_("echo requests: %u"), i_inp_icmp | I_TITLE},
-    {"InEchoReps", N_("echo replies: %u"), i_inp_icmp | I_TITLE},
-    {"InTimestamps", N_("timestamp request: %u"), i_inp_icmp | I_TITLE},
-    {"InTimestampReps", N_("timestamp reply: %u"), i_inp_icmp | I_TITLE},
-    {"InAddrMasks", N_("address mask request: %u"), i_inp_icmp | I_TITLE},	/*? */
-    {"InAddrMaskReps", N_("address mask replies: %u"), i_inp_icmp | I_TITLE},	/*? */
-    {"OutMsgs", N_("%u ICMP messages sent"), number},
-    {"OutErrors", N_("%u ICMP messages failed"), number},
-    {"OutDestUnreachs", N_("destination unreachable: %u"), i_outp_icmp | I_TITLE},
-    {"OutTimeExcds", N_("time exceeded: %u"), i_outp_icmp | I_TITLE},
-    {"OutParmProbs", N_("wrong parameters: %u"), i_outp_icmp | I_TITLE},	/*? */
-    {"OutSrcQuenchs", N_("source quench: %u"), i_outp_icmp | I_TITLE},
-    {"OutRedirects", N_("redirect: %u"), i_outp_icmp | I_TITLE},
-    {"OutEchos", N_("echo request: %u"), i_outp_icmp | I_TITLE},
-    {"OutEchoReps", N_("echo replies: %u"), i_outp_icmp | I_TITLE},
-    {"OutTimestamps", N_("timestamp requests: %u"), i_outp_icmp | I_TITLE},
-    {"OutTimestampReps", N_("timestamp replies: %u"), i_outp_icmp | I_TITLE},
-    {"OutAddrMasks", N_("address mask requests: %u"), i_outp_icmp | I_TITLE},
-    {"OutAddrMaskReps", N_("address mask replies: %u"), i_outp_icmp | I_TITLE},
+    {"InMsgs", N_("%lu ICMP messages received"), number},
+    {"InErrors", N_("%lu input ICMP message failed."), number},
+    {"InDestUnreachs", N_("destination unreachable: %lu"), i_inp_icmp | I_TITLE},
+    {"InTimeExcds", N_("timeout in transit: %lu"), i_inp_icmp | I_TITLE},
+    {"InParmProbs", N_("wrong parameters: %lu"), i_inp_icmp | I_TITLE},	/*? */
+    {"InSrcQuenchs", N_("source quenches: %lu"), i_inp_icmp | I_TITLE},
+    {"InRedirects", N_("redirects: %lu"), i_inp_icmp | I_TITLE},
+    {"InEchos", N_("echo requests: %lu"), i_inp_icmp | I_TITLE},
+    {"InEchoReps", N_("echo replies: %lu"), i_inp_icmp | I_TITLE},
+    {"InTimestamps", N_("timestamp request: %lu"), i_inp_icmp | I_TITLE},
+    {"InTimestampReps", N_("timestamp reply: %lu"), i_inp_icmp | I_TITLE},
+    {"InAddrMasks", N_("address mask request: %lu"), i_inp_icmp | I_TITLE},	/*? */
+    {"InAddrMaskReps", N_("address mask replies: %lu"), i_inp_icmp | I_TITLE},	/*? */
+    {"OutMsgs", N_("%lu ICMP messages sent"), number},
+    {"OutErrors", N_("%lu ICMP messages failed"), number},
+    {"OutDestUnreachs", N_("destination unreachable: %lu"), i_outp_icmp | I_TITLE},
+    {"OutTimeExcds", N_("time exceeded: %lu"), i_outp_icmp | I_TITLE},
+    {"OutParmProbs", N_("wrong parameters: %lu"), i_outp_icmp | I_TITLE},	/*? */
+    {"OutSrcQuenchs", N_("source quench: %lu"), i_outp_icmp | I_TITLE},
+    {"OutRedirects", N_("redirect: %lu"), i_outp_icmp | I_TITLE},
+    {"OutEchos", N_("echo request: %lu"), i_outp_icmp | I_TITLE},
+    {"OutEchoReps", N_("echo replies: %lu"), i_outp_icmp | I_TITLE},
+    {"OutTimestamps", N_("timestamp requests: %lu"), i_outp_icmp | I_TITLE},
+    {"OutTimestampReps", N_("timestamp replies: %lu"), i_outp_icmp | I_TITLE},
+    {"OutAddrMasks", N_("address mask requests: %lu"), i_outp_icmp | I_TITLE},
+    {"OutAddrMaskReps", N_("address mask replies: %lu"), i_outp_icmp | I_TITLE},
 };
 
 struct entry Tcptab[] =
@@ -119,71 +119,71 @@
     {"RtoMin", "", number},
     {"RtoMax", "", number},
     {"MaxConn", "", number},
-    {"ActiveOpens", N_("%u active connections openings"), number},
-    {"PassiveOpens", N_("%u passive connection openings"), number},
-    {"AttemptFails", N_("%u failed connection attempts"), number},
-    {"EstabResets", N_("%u connection resets received"), number},
-    {"CurrEstab", N_("%u connections established"), number},
-    {"InSegs", N_("%u segments received"), number},
-    {"OutSegs", N_("%u segments send out"), number},
-    {"RetransSegs", N_("%u segments retransmited"), number},
-    {"InErrs", N_("%u bad segments received."), number},
-    {"OutRsts", N_("%u resets sent"), number},
+    {"ActiveOpens", N_("%lu active connections openings"), number},
+    {"PassiveOpens", N_("%lu passive connection openings"), number},
+    {"AttemptFails", N_("%lu failed connection attempts"), number},
+    {"EstabResets", N_("%lu connection resets received"), number},
+    {"CurrEstab", N_("%lu connections established"), number},
+    {"InSegs", N_("%lu segments received"), number},
+    {"OutSegs", N_("%lu segments send out"), number},
+    {"RetransSegs", N_("%lu segments retransmited"), number},
+    {"InErrs", N_("%lu bad segments received."), number},
+    {"OutRsts", N_("%lu resets sent"), number},
 };
 
 struct entry Udptab[] =
 {
-    {"InDatagrams", N_("%u packets received"), number},
-    {"NoPorts", N_("%u packets to unknown port received."), number},
-    {"InErrors", N_("%u packet receive errors"), number},
-    {"OutDatagrams", N_("%u packets sent"), number},
+    {"InDatagrams", N_("%lu packets received"), number},
+    {"NoPorts", N_("%lu packets to unknown port received."), number},
+    {"InErrors", N_("%lu packet receive errors"), number},
+    {"OutDatagrams", N_("%lu packets sent"), number},
 };
 
 struct entry Tcpexttab[] =
 {
-    {"SyncookiesSent", N_("%u SYN cookies sent"), opt_number},
-    {"SyncookiesRecv", N_("%u SYN cookies received"), opt_number},
-    {"SyncookiesFailed", N_("%u invalid SYN cookies received"), opt_number},
+    {"SyncookiesSent", N_("%lu SYN cookies sent"), opt_number},
+    {"SyncookiesRecv", N_("%lu SYN cookies received"), opt_number},
+    {"SyncookiesFailed", N_("%lu invalid SYN cookies received"), opt_number},
 
-    { "EmbryonicRsts", N_("%u resets received for embryonic SYN_RECV sockets"),
+    { "EmbryonicRsts", N_("%lu resets received for embryonic SYN_RECV sockets"),
       opt_number },  
-    { "PruneCalled", N_("%u packets pruned from receive queue because of socket"
+    { "PruneCalled", N_("%lu packets pruned from receive queue because of socket"
 			" buffer overrun"), opt_number },  
     /* obsolete: 2.2.0 doesn't do that anymore */
-    { "RcvPruned", N_("%u packets pruned from receive queue"), opt_number },
-    { "OfoPruned", N_("%u packets dropped from out-of-order queue because of"
+    { "RcvPruned", N_("%lu packets pruned from receive queue"), opt_number },
+    { "OfoPruned", N_("%lu packets dropped from out-of-order queue because of"
 		      " socket buffer overrun"), opt_number }, 
-    { "OutOfWindowIcmps", N_("%u ICMP packets dropped because they were "
+    { "OutOfWindowIcmps", N_("%lu ICMP packets dropped because they were "
 			     "out-of-window"), opt_number }, 
-    { "LockDroppedIcmps", N_("%u ICMP packets dropped because"
+    { "LockDroppedIcmps", N_("%lu ICMP packets dropped because"
 			     " socket was locked"), opt_number },
-    { "TW", N_("%u TCP sockets finished time wait in fast timer"), opt_number },
-    { "TWRecycled", N_("%u time wait sockets recycled by time stamp"), opt_number }, 
-    { "TWKilled", N_("%u TCP sockets finished time wait in slow timer"), opt_number },
-    { "PAWSPassive", N_("%u passive connections rejected because of"
+    { "TW", N_("%lu TCP sockets finished time wait in fast timer"), opt_number },
+    { "TWRecycled", N_("%lu time wait sockets recycled by time stamp"), opt_number }, 
+    { "TWKilled", N_("%lu TCP sockets finished time wait in slow timer"), opt_number },
+    { "PAWSPassive", N_("%lu passive connections rejected because of"
 			" time stamp"), opt_number },
-    { "PAWSActive", N_("%u active connections rejected because of "
+    { "PAWSActive", N_("%lu active connections rejected because of "
 		       "time stamp"), opt_number },
-    { "PAWSEstab", N_("%u packets rejects in established connections because of"
+    { "PAWSEstab", N_("%lu packets rejects in established connections because of"
 		      " timestamp"), opt_number },
-    { "DelayedACKs", N_("%u delayed acks sent"), opt_number },
-    { "DelayedACKLocked", N_("%u delayed acks further delayed because of"
+    { "DelayedACKs", N_("%lu delayed acks sent"), opt_number },
+    { "DelayedACKLocked", N_("%lu delayed acks further delayed because of"
 			     " locked socket"), opt_number },
-    { "DelayedACKLost", N_("Quick ack mode was activated %u times"), opt_number },
-    { "ListenOverflows", N_("%u times the listen queue of a socket overflowed"),
+    { "DelayedACKLost", N_("Quick ack mode was activated %lu times"), opt_number },
+    { "ListenOverflows", N_("%lu times the listen queue of a socket overflowed"),
       opt_number },
-    { "ListenDrops", N_("%u SYNs to LISTEN sockets ignored"), opt_number },
-    { "TCPPrequeued", N_("%u packets directly queued to recvmsg prequeue."), 
+    { "ListenDrops", N_("%lu SYNs to LISTEN sockets ignored"), opt_number },
+    { "TCPPrequeued", N_("%lu packets directly queued to recvmsg prequeue."), 
       opt_number },
-    { "TCPDirectCopyFromBacklog", N_("%u packets directly received"
+    { "TCPDirectCopyFromBacklog", N_("%lu packets directly received"
 				     " from backlog"), opt_number },
-    { "TCPDirectCopyFromPrequeue", N_("%u packets directly received"
+    { "TCPDirectCopyFromPrequeue", N_("%lu packets directly received"
 				      " from prequeue"), opt_number },
-    { "TCPPrequeueDropped", N_("%u packets dropped from prequeue"), opt_number },
-    { "TCPHPHits", N_("%u packets header predicted"), number },
-    { "TCPHPHitsToUser", N_("%u packets header predicted and "
+    { "TCPPrequeueDropped", N_("%lu packets dropped from prequeue"), opt_number },
+    { "TCPHPHits", N_("%lu packets header predicted"), number },
+    { "TCPHPHitsToUser", N_("%lu packets header predicted and "
 			    "directly queued to user"), opt_number },
-    { "SockMallocOOM", N_("Ran %u times out of system memory during " 
+    { "SockMallocOOM", N_("Ran %lu times out of system memory during " 
 			  "packet sending"), opt_number }, 
 };
 
